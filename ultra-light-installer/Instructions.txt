# PDF Tools Self-Hosted - Ultra Light Installer

## What makes this "Ultra Light"?

ðŸª¶ **Traditional Approach**: 500MB+ executable with all dependencies bundled
ðŸš€ **Ultra Light Approach**: 20MB installer + dynamic download (~45MB total)

### Size Comparison:
- **Our Ultra Light**: ~20MB installer â†’ ~45MB installed
- **Traditional PKG**: ~500MB+ single file
- **Savings**: 90%+ smaller distribution size!

## How it Works:

1. **Smart Downloads**: Only downloads what's needed
   - Node.js: ~30MB (if not installed)
   - PDF Tools: ~5MB source code
   - Dependencies: ~10MB (npm packages)

2. **Efficient Installation**:
   - Detects existing Node.js installation
   - Downloads components on-demand
   - Installs to user directory (no admin required)
   - Creates shortcuts and launchers

3. **Easy Distribution**:
   - Single 20MB installer file
   - Works on any Windows 10/11 system
   - Auto-handles dependencies
   - Creates proper uninstaller

## Files in this package:

- **PDF-Tools-Ultra-Light-Setup.bat** - Main installer (20MB when complete)
- **create-source-package.js** - Creates compressed source package
- **Instructions.txt** - This file

## Creating the Final Installer:

1. Run: `node create-source-package.js`
2. Embed the source package into the installer
3. Test on a clean Windows system
4. Distribute the single installer file

## Benefits:

âœ… **Easy Distribution**: Single small file to share
âœ… **Fast Download**: 90%+ smaller than traditional approach
âœ… **Auto-Setup**: Handles all dependencies automatically
âœ… **No Admin**: Installs to user directory
âœ… **Clean Uninstall**: Proper removal process
âœ… **Universal**: Works on all Windows 10/11 systems

## System Requirements:

- Windows 10/11 (64-bit)
- Internet connection (for initial setup)
- 100MB free disk space
- Optional: Administrator privileges (for system-wide install)

## Technical Details:

The installer uses a hybrid approach:
1. **Base installer**: Lightweight batch script with embedded metadata
2. **Dynamic download**: Node.js and npm packages downloaded as needed
3. **Source embedding**: Application source code embedded in installer
4. **Smart caching**: Reuses existing Node.js if available

This approach reduces distribution size by 90%+ while maintaining full functionality!
